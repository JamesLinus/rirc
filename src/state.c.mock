/* vim: set filetype=c: */

/* Stubbed out functions required by hanlders in send/recv methods,
 * implemented as needed for tests */

#include <stdarg.h>
#include <string.h>

#include "common.h"

void
newline(channel *c, line_t type, const char *from, const char *mesg)
{
	UNUSED(c);
	UNUSED(type);
	UNUSED(from);
	UNUSED(mesg);
}

static int newlinef__called__;
static char newlinef__buff__[BUFFSIZE + 1];

void
newlinef(channel *c, line_t type, const char *from, const char *fmt, ...)
{
	UNUSED(c);
	UNUSED(type);
	UNUSED(from);

	newlinef__called__ = 1;

	va_list ap;

	va_start(ap, fmt);
	vsnprintf(newlinef__buff__, BUFFSIZE, fmt, ap);
	va_end(ap);
}

channel*
channel_get(char *chan, server *s)
{
	UNUSED(chan);
	UNUSED(s);

	return NULL;
}

static int sendf__called__;
static char sendf__buff__[BUFFSIZE];

int
sendf(char *err, server *s, const char *fmt, ...)
{
	UNUSED(err);
	UNUSED(s);

	sendf__called__ = 1;

	va_list ap;

	va_start(ap, fmt);
	vsnprintf(sendf__buff__, BUFFSIZE, fmt, ap);
	va_end(ap);

	return 0;
}

channel*
new_channel(char *name, server *server, channel *chanlist, buffer_t type)
{
	UNUSED(name);
	UNUSED(server);
	UNUSED(chanlist);
	UNUSED(type);

	return NULL;
}

static int server_connect__called__;
static char *server_connect__host__;
static char *server_connect__port__;

void
server_connect(char *host, char *port)
{
	server_connect__called__ = 1;

	server_connect__host__ = host;
	server_connect__port__ = port;
}

void
server_disconnect(server *s, int err, int kill, char *mesg)
{
	UNUSED(s);
	UNUSED(err);
	UNUSED(kill);
	UNUSED(mesg);
}

void
channel_set_mode(channel *c, const char *modes)
{
	UNUSED(c);
	UNUSED(modes);
}

void
server_set_mode(server *s, const char *modes)
{
	UNUSED(s);
	UNUSED(modes);
}

void
auto_nick(char **autonick, char *nick)
{
	UNUSED(autonick);
	UNUSED(nick);
}

void
channel_clear(channel *c)
{
	UNUSED(c);
}

void
channel_close(channel *c)
{
	UNUSED(c);
}

void
free_channel(channel *c)
{
	UNUSED(c);
}

void
part_channel(channel *c)
{
	UNUSED(c);
}

static int nicklist_print__called__;

void
nicklist_print(channel *c)
{
	UNUSED(c);

	nicklist_print__called__ = 1;
}

struct state const*
get_state(void)
{
	return NULL;
}

void
channel_set_current(channel *c)
{
	UNUSED(c);
}
